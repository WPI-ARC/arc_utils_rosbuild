/* Auto-generated by genmsg_cpp for file /home/calderpg/Dropbox/arc-ros-dev/ros_email/srv/SendMailPlus.srv */
#ifndef ROS_EMAIL_SERVICE_SENDMAILPLUS_H
#define ROS_EMAIL_SERVICE_SENDMAILPLUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "ros_email/attachment.h"



namespace ros_email
{
template <class ContainerAllocator>
struct SendMailPlusRequest_ {
  typedef SendMailPlusRequest_<ContainerAllocator> Type;

  SendMailPlusRequest_()
  : recipient()
  , message_title()
  , message_text()
  , attachments()
  {
  }

  SendMailPlusRequest_(const ContainerAllocator& _alloc)
  : recipient(_alloc)
  , message_title(_alloc)
  , message_text(_alloc)
  , attachments(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _recipient_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  recipient;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_title_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  message_title;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_text_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  message_text;

  typedef std::vector< ::ros_email::attachment_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ros_email::attachment_<ContainerAllocator> >::other >  _attachments_type;
  std::vector< ::ros_email::attachment_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ros_email::attachment_<ContainerAllocator> >::other >  attachments;


  typedef boost::shared_ptr< ::ros_email::SendMailPlusRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_email::SendMailPlusRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SendMailPlusRequest
typedef  ::ros_email::SendMailPlusRequest_<std::allocator<void> > SendMailPlusRequest;

typedef boost::shared_ptr< ::ros_email::SendMailPlusRequest> SendMailPlusRequestPtr;
typedef boost::shared_ptr< ::ros_email::SendMailPlusRequest const> SendMailPlusRequestConstPtr;


template <class ContainerAllocator>
struct SendMailPlusResponse_ {
  typedef SendMailPlusResponse_<ContainerAllocator> Type;

  SendMailPlusResponse_()
  : result(0)
  {
  }

  SendMailPlusResponse_(const ContainerAllocator& _alloc)
  : result(0)
  {
  }

  typedef int32_t _result_type;
  int32_t result;


  typedef boost::shared_ptr< ::ros_email::SendMailPlusResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_email::SendMailPlusResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SendMailPlusResponse
typedef  ::ros_email::SendMailPlusResponse_<std::allocator<void> > SendMailPlusResponse;

typedef boost::shared_ptr< ::ros_email::SendMailPlusResponse> SendMailPlusResponsePtr;
typedef boost::shared_ptr< ::ros_email::SendMailPlusResponse const> SendMailPlusResponseConstPtr;

struct SendMailPlus
{

typedef SendMailPlusRequest Request;
typedef SendMailPlusResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SendMailPlus
} // namespace ros_email

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ros_email::SendMailPlusRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ros_email::SendMailPlusRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ros_email::SendMailPlusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c3ffe9fba94bbe8be423c1934dbacbce";
  }

  static const char* value(const  ::ros_email::SendMailPlusRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc3ffe9fba94bbe8bULL;
  static const uint64_t static_value2 = 0xe423c1934dbacbceULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_email::SendMailPlusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ros_email/SendMailPlusRequest";
  }

  static const char* value(const  ::ros_email::SendMailPlusRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ros_email::SendMailPlusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string recipient\n\
string message_title\n\
string message_text\n\
attachment[] attachments\n\
\n\
================================================================================\n\
MSG: ros_email/attachment\n\
string name\n\
uint8[] data\n\
\n\
";
  }

  static const char* value(const  ::ros_email::SendMailPlusRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ros_email::SendMailPlusResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ros_email::SendMailPlusResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ros_email::SendMailPlusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "034a8e20d6a306665e3a5b340fab3f09";
  }

  static const char* value(const  ::ros_email::SendMailPlusResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x034a8e20d6a30666ULL;
  static const uint64_t static_value2 = 0x5e3a5b340fab3f09ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_email::SendMailPlusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ros_email/SendMailPlusResponse";
  }

  static const char* value(const  ::ros_email::SendMailPlusResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ros_email::SendMailPlusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 result\n\
\n\
\n\
";
  }

  static const char* value(const  ::ros_email::SendMailPlusResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ros_email::SendMailPlusResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ros_email::SendMailPlusRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.recipient);
    stream.next(m.message_title);
    stream.next(m.message_text);
    stream.next(m.attachments);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SendMailPlusRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ros_email::SendMailPlusResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SendMailPlusResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<ros_email::SendMailPlus> {
  static const char* value() 
  {
    return "d30074466dc7004b5ca42343ef1633da";
  }

  static const char* value(const ros_email::SendMailPlus&) { return value(); } 
};

template<>
struct DataType<ros_email::SendMailPlus> {
  static const char* value() 
  {
    return "ros_email/SendMailPlus";
  }

  static const char* value(const ros_email::SendMailPlus&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ros_email::SendMailPlusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d30074466dc7004b5ca42343ef1633da";
  }

  static const char* value(const ros_email::SendMailPlusRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ros_email::SendMailPlusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ros_email/SendMailPlus";
  }

  static const char* value(const ros_email::SendMailPlusRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ros_email::SendMailPlusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d30074466dc7004b5ca42343ef1633da";
  }

  static const char* value(const ros_email::SendMailPlusResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ros_email::SendMailPlusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ros_email/SendMailPlus";
  }

  static const char* value(const ros_email::SendMailPlusResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROS_EMAIL_SERVICE_SENDMAILPLUS_H

